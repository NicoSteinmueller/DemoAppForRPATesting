@page "/Bestandsauskunft"
@using System.ComponentModel.DataAnnotations
@using DemoAppForRPATesting.Repositories
@inject IPensionRepository PensionRepository
@inject NavigationManager NavigationManager


<br/>
<MudText Typo="Typo.h3" Align="Align.Center">Bestandsauskunft</MudText>
<br/>
<br/>

<EditForm Model="@_model" OnValidSubmit="OnValidSubmit">
    <DataAnnotationsValidator/>
    <MudContainer MaxWidth="MaxWidth.Medium">
        <MudItem>
            <MudCard>
                <MudCardContent>
                    <MudTextField Label="PANR" HelperText="Postabrechnungsnummer hier eingeben" @bind-Value="_model.Panr" For="@(() => _model.Panr)" Mask="@(new PatternMask("000"))" ErrorText="Postabrechnungnummer hier eingeben."/>
                    <MudTextField Label="PRNR" HelperText="Postrentennummer hier eingeben" @bind-Value="_model.Prnr" For="@(() => _model.Prnr)" Mask="@(new PatternMask("00000000a00000"))" ErrorText="Postrentennummer hier eingeben."/>
                    @if (notFound)
                    {
                        <MudText Color="Color.Error">Es wurde keine passende Rente gefunden.</MudText>
                    }
                </MudCardContent>
                <MudCardActions>
                    <MudButton ButtonType="ButtonType.Reset" Variant="Variant.Filled" Color="Color.Secondary" Class="ml-auto" OnClick="Reset">
                        <MudIcon Icon="@Icons.Material.Filled.Loop" Size="Size.Medium"/> Zurücksetzen
                    </MudButton>
                    <MudButton ButtonType="ButtonType.Submit" Variant="Variant.Filled" Color="Color.Primary">Suchen
                        <MudIcon Icon="@Icons.Material.Filled.KeyboardArrowRight" Size="Size.Medium"/>
                    </MudButton>
                </MudCardActions>
            </MudCard>
        </MudItem>
    </MudContainer>
</EditForm>


@code {
    bool notFound;
    BestandsauskunftSearchForm _model = new();

    public class BestandsauskunftSearchForm
    {
        [Required(ErrorMessage = "Postabrechnungnummer wird benötigt.")]
        [StringLength(maximumLength: 3, MinimumLength = 3, ErrorMessage = "Die PANR ist unvollständig.")]
        public string Panr { get; set; } = "";

        [Required(ErrorMessage = "Postrentennummer wird benötigt.")]
        [StringLength(maximumLength: 14, MinimumLength = 12, ErrorMessage = "Die PRNR ist unvollständig.")]
        public string Prnr { get; set; } = "";
    }
    
    private void OnValidSubmit(EditContext context)
    {
        notFound = false;
        Random random = new Random();
        Task.Delay(random.Next(500, 5001)).Wait();
        var pension = PensionRepository.FindByPanrAndPrnr(_model.Panr!, _model.Prnr!);
        if (pension == null)
        {
            notFound = true;
            Log.Information("customLogging; Bestandsauskunft; Pension with PANR: "+_model.Panr+" and PRNR: "+_model.Prnr+" not found");
        }
        else
        {
            NavigationManager.NavigateTo("/Bestandsfall/"+pension.Id);
            Log.Information("customLogging; Bestandsauskunft; Pension with PANR: "+_model.Panr+" and PRNR: "+_model.Prnr+" found and open");
        }
    }

    private void Reset()
    {
        _model = new BestandsauskunftSearchForm();
        notFound = false;
        Log.Information("customLogging; Bestandsauskunft; reset input form");
    }
    
}